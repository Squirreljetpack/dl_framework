class FolderImageDataset(td.Dataset):
    def __init__(self, root_dir, transform=None):
        """
        Args:
            root_dir (string): Directory with all the images, whose label is their folder name.
            transform (callable, optional): Optional transform to be applied on an image.
        """
        self.root_dir = root_dir
        self.transform = transform
        self.image_paths = []
        self.labels = []

        # Loop through each folder in the root directory

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        # Load the image
        img_path = self.image_paths[idx]
        image = Image.open(img_path)
        label = self.labels[idx]

        # Apply transformation if any
        if self.transform:
            image = self.transform(image)

        return image, label


class ClassifierDataModule(DataModule):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.save_attr()


class FileImageDataset(td.Dataset):
    def __init__(self, file_path, transform=None):
        """
        Args:
            file_path (string): Path to the file that contains image paths, labels and IDs.
            transform (callable, optional): Optional transform to be applied on an image.
        """
        self.file_path = file_path
        self.transform = transform
        self.image_paths = []
        self.labels = []

        # Read the file and extract paths and labels
        with open(file_path, "r") as f:
            for line in f:
                parts = line.strip().split("\t")
                if len(parts) == 3:
                    self.image_paths.append(parts[2])  # The path is in the third column
                    self.labels.append(parts[1])  # The label is in the second column

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        # Load the image
        img_path = self.image_paths[idx]
        image = Image.open(img_path)
        label = self.labels[idx]

        # Apply transformation if any
        if self.transform:
            image = self.transform(image)

        return image, label
